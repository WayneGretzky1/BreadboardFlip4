
c:/Users/brock/EE1301/Breadboard_Flip_4/IoT/songs/Songs/target/2.3.0/photon/Songs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00000ca4  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a0cc0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  20000000  080a0cc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000054c  2000006c  2000006c  0003006c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a0d30  080a0d30  00020d30  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a0d58  080a0d58  00020d58  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000a68e6  00000000  00000000  00020d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000cf52  00000000  00000000  000c7642  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000ff45  00000000  00000000  000d4594  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001410  00000000  00000000  000e44d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000033d8  00000000  00000000  000e58e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001ff7e  00000000  00000000  000e8cc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001cb4a  00000000  00000000  00108c3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a7d4f  00000000  00000000  00125789  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000032bc  00000000  00000000  001cd4d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f000 fcff 	bl	80a0a30 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f000 fd07 	bl	80a0a4c <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a0cc4 	.word	0x080a0cc4
 80a004c:	2000006c 	.word	0x2000006c
 80a0050:	2000006c 	.word	0x2000006c
 80a0054:	200005b5 	.word	0x200005b5
 80a0058:	200005b5 	.word	0x200005b5

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f000 fa37 	bl	80a04d0 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	2500      	movs	r5, #0
 80a0064:	4e05      	ldr	r6, [pc, #20]	; (80a007c <module_user_init+0x20>)
 80a0066:	4c06      	ldr	r4, [pc, #24]	; (80a0080 <module_user_init+0x24>)
 80a0068:	1ba4      	subs	r4, r4, r6
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	42a5      	cmp	r5, r4
 80a006e:	d100      	bne.n	80a0072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0072:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f7      	b.n	80a006c <module_user_init+0x10>
 80a007c:	080a0ca4 	.word	0x080a0ca4
 80a0080:	080a0cc0 	.word	0x080a0cc0

080a0084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0084:	f000 b811 	b.w	80a00aa <setup>

080a0088 <module_user_loop>:
}

void module_user_loop() {
 80a0088:	b508      	push	{r3, lr}
    loop();
 80a008a:	f000 f80f 	bl	80a00ac <loop>
    _post_loop();
}
 80a008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0092:	f000 b9d5 	b.w	80a0440 <_post_loop>

080a0096 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a0096:	f000 b917 	b.w	80a02c8 <free>

080a009a <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a009a:	7800      	ldrb	r0, [r0, #0]
 80a009c:	fab0 f080 	clz	r0, r0
 80a00a0:	0940      	lsrs	r0, r0, #5
 80a00a2:	4770      	bx	lr

080a00a4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00a4:	2301      	movs	r3, #1
 80a00a6:	7003      	strb	r3, [r0, #0]
 80a00a8:	4770      	bx	lr

080a00aa <setup>:

// setup() runs once, when the device is first turned on.
void setup() {
  // Put initialization like pinMode and begin functions here.

}
 80a00aa:	4770      	bx	lr

080a00ac <loop>:
 80a00ac:	4770      	bx	lr
	...

080a00b0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a00b0:	b508      	push	{r3, lr}
 80a00b2:	4b02      	ldr	r3, [pc, #8]	; (80a00bc <HAL_RNG_GetRandomNumber+0xc>)
 80a00b4:	681b      	ldr	r3, [r3, #0]
 80a00b6:	685b      	ldr	r3, [r3, #4]
 80a00b8:	9301      	str	r3, [sp, #4]
 80a00ba:	bd08      	pop	{r3, pc}
 80a00bc:	0806019c 	.word	0x0806019c

080a00c0 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a00c0:	b508      	push	{r3, lr}
 80a00c2:	4b02      	ldr	r3, [pc, #8]	; (80a00cc <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a00c4:	681b      	ldr	r3, [r3, #0]
 80a00c6:	695b      	ldr	r3, [r3, #20]
 80a00c8:	9301      	str	r3, [sp, #4]
 80a00ca:	bd08      	pop	{r3, pc}
 80a00cc:	0806019c 	.word	0x0806019c

080a00d0 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a00d0:	b508      	push	{r3, lr}
 80a00d2:	4b02      	ldr	r3, [pc, #8]	; (80a00dc <hal_usart_init+0xc>)
 80a00d4:	681b      	ldr	r3, [r3, #0]
 80a00d6:	699b      	ldr	r3, [r3, #24]
 80a00d8:	9301      	str	r3, [sp, #4]
 80a00da:	bd08      	pop	{r3, pc}
 80a00dc:	080601c4 	.word	0x080601c4

080a00e0 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a00e0:	b508      	push	{r3, lr}
 80a00e2:	4b02      	ldr	r3, [pc, #8]	; (80a00ec <hal_usart_write+0xc>)
 80a00e4:	681b      	ldr	r3, [r3, #0]
 80a00e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a00e8:	9301      	str	r3, [sp, #4]
 80a00ea:	bd08      	pop	{r3, pc}
 80a00ec:	080601c4 	.word	0x080601c4

080a00f0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a00f0:	b508      	push	{r3, lr}
 80a00f2:	4b02      	ldr	r3, [pc, #8]	; (80a00fc <hal_usart_available+0xc>)
 80a00f4:	681b      	ldr	r3, [r3, #0]
 80a00f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a00f8:	9301      	str	r3, [sp, #4]
 80a00fa:	bd08      	pop	{r3, pc}
 80a00fc:	080601c4 	.word	0x080601c4

080a0100 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a0100:	b508      	push	{r3, lr}
 80a0102:	4b02      	ldr	r3, [pc, #8]	; (80a010c <hal_usart_read+0xc>)
 80a0104:	681b      	ldr	r3, [r3, #0]
 80a0106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0108:	9301      	str	r3, [sp, #4]
 80a010a:	bd08      	pop	{r3, pc}
 80a010c:	080601c4 	.word	0x080601c4

080a0110 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a0110:	b508      	push	{r3, lr}
 80a0112:	4b02      	ldr	r3, [pc, #8]	; (80a011c <hal_usart_peek+0xc>)
 80a0114:	681b      	ldr	r3, [r3, #0]
 80a0116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0118:	9301      	str	r3, [sp, #4]
 80a011a:	bd08      	pop	{r3, pc}
 80a011c:	080601c4 	.word	0x080601c4

080a0120 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a0120:	b508      	push	{r3, lr}
 80a0122:	4b02      	ldr	r3, [pc, #8]	; (80a012c <hal_usart_flush+0xc>)
 80a0124:	681b      	ldr	r3, [r3, #0]
 80a0126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0128:	9301      	str	r3, [sp, #4]
 80a012a:	bd08      	pop	{r3, pc}
 80a012c:	080601c4 	.word	0x080601c4

080a0130 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a0130:	b508      	push	{r3, lr}
 80a0132:	4b02      	ldr	r3, [pc, #8]	; (80a013c <hal_usart_available_data_for_write+0xc>)
 80a0134:	681b      	ldr	r3, [r3, #0]
 80a0136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0138:	9301      	str	r3, [sp, #4]
 80a013a:	bd08      	pop	{r3, pc}
 80a013c:	080601c4 	.word	0x080601c4

080a0140 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0140:	b508      	push	{r3, lr}
 80a0142:	4b02      	ldr	r3, [pc, #8]	; (80a014c <HAL_USB_USART_Init+0xc>)
 80a0144:	681b      	ldr	r3, [r3, #0]
 80a0146:	681b      	ldr	r3, [r3, #0]
 80a0148:	9301      	str	r3, [sp, #4]
 80a014a:	bd08      	pop	{r3, pc}
 80a014c:	080601d8 	.word	0x080601d8

080a0150 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0150:	b508      	push	{r3, lr}
 80a0152:	4b02      	ldr	r3, [pc, #8]	; (80a015c <HAL_USB_USART_Available_Data+0xc>)
 80a0154:	681b      	ldr	r3, [r3, #0]
 80a0156:	691b      	ldr	r3, [r3, #16]
 80a0158:	9301      	str	r3, [sp, #4]
 80a015a:	bd08      	pop	{r3, pc}
 80a015c:	080601d8 	.word	0x080601d8

080a0160 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0160:	b508      	push	{r3, lr}
 80a0162:	4b02      	ldr	r3, [pc, #8]	; (80a016c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0164:	681b      	ldr	r3, [r3, #0]
 80a0166:	695b      	ldr	r3, [r3, #20]
 80a0168:	9301      	str	r3, [sp, #4]
 80a016a:	bd08      	pop	{r3, pc}
 80a016c:	080601d8 	.word	0x080601d8

080a0170 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0170:	b508      	push	{r3, lr}
 80a0172:	4b02      	ldr	r3, [pc, #8]	; (80a017c <HAL_USB_USART_Receive_Data+0xc>)
 80a0174:	681b      	ldr	r3, [r3, #0]
 80a0176:	699b      	ldr	r3, [r3, #24]
 80a0178:	9301      	str	r3, [sp, #4]
 80a017a:	bd08      	pop	{r3, pc}
 80a017c:	080601d8 	.word	0x080601d8

080a0180 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0180:	b508      	push	{r3, lr}
 80a0182:	4b02      	ldr	r3, [pc, #8]	; (80a018c <HAL_USB_USART_Send_Data+0xc>)
 80a0184:	681b      	ldr	r3, [r3, #0]
 80a0186:	69db      	ldr	r3, [r3, #28]
 80a0188:	9301      	str	r3, [sp, #4]
 80a018a:	bd08      	pop	{r3, pc}
 80a018c:	080601d8 	.word	0x080601d8

080a0190 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0190:	b508      	push	{r3, lr}
 80a0192:	4b02      	ldr	r3, [pc, #8]	; (80a019c <HAL_USB_USART_Flush_Data+0xc>)
 80a0194:	681b      	ldr	r3, [r3, #0]
 80a0196:	6a1b      	ldr	r3, [r3, #32]
 80a0198:	9301      	str	r3, [sp, #4]
 80a019a:	bd08      	pop	{r3, pc}
 80a019c:	080601d8 	.word	0x080601d8

080a01a0 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a01a0:	b508      	push	{r3, lr}
 80a01a2:	4b02      	ldr	r3, [pc, #8]	; (80a01ac <inet_gethostbyname+0xc>)
 80a01a4:	681b      	ldr	r3, [r3, #0]
 80a01a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a01a8:	9301      	str	r3, [sp, #4]
 80a01aa:	bd08      	pop	{r3, pc}
 80a01ac:	080601c0 	.word	0x080601c0

080a01b0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a01b0:	b508      	push	{r3, lr}
 80a01b2:	4b02      	ldr	r3, [pc, #8]	; (80a01bc <set_system_mode+0xc>)
 80a01b4:	681b      	ldr	r3, [r3, #0]
 80a01b6:	685b      	ldr	r3, [r3, #4]
 80a01b8:	9301      	str	r3, [sp, #4]
 80a01ba:	bd08      	pop	{r3, pc}
 80a01bc:	080601a4 	.word	0x080601a4

080a01c0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a01c0:	b508      	push	{r3, lr}
 80a01c2:	4b03      	ldr	r3, [pc, #12]	; (80a01d0 <system_ctrl_set_app_request_handler+0x10>)
 80a01c4:	681b      	ldr	r3, [r3, #0]
 80a01c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a01ca:	9301      	str	r3, [sp, #4]
 80a01cc:	bd08      	pop	{r3, pc}
 80a01ce:	0000      	.short	0x0000
 80a01d0:	080601a4 	.word	0x080601a4

080a01d4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a01d4:	b508      	push	{r3, lr}
 80a01d6:	4b03      	ldr	r3, [pc, #12]	; (80a01e4 <system_ctrl_set_result+0x10>)
 80a01d8:	681b      	ldr	r3, [r3, #0]
 80a01da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a01de:	9301      	str	r3, [sp, #4]
 80a01e0:	bd08      	pop	{r3, pc}
 80a01e2:	0000      	.short	0x0000
 80a01e4:	080601a4 	.word	0x080601a4

080a01e8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a01e8:	b508      	push	{r3, lr}
 80a01ea:	4b02      	ldr	r3, [pc, #8]	; (80a01f4 <network_connect+0xc>)
 80a01ec:	681b      	ldr	r3, [r3, #0]
 80a01ee:	685b      	ldr	r3, [r3, #4]
 80a01f0:	9301      	str	r3, [sp, #4]
 80a01f2:	bd08      	pop	{r3, pc}
 80a01f4:	080601c8 	.word	0x080601c8

080a01f8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a01f8:	b508      	push	{r3, lr}
 80a01fa:	4b02      	ldr	r3, [pc, #8]	; (80a0204 <network_connecting+0xc>)
 80a01fc:	681b      	ldr	r3, [r3, #0]
 80a01fe:	689b      	ldr	r3, [r3, #8]
 80a0200:	9301      	str	r3, [sp, #4]
 80a0202:	bd08      	pop	{r3, pc}
 80a0204:	080601c8 	.word	0x080601c8

080a0208 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0208:	b508      	push	{r3, lr}
 80a020a:	4b02      	ldr	r3, [pc, #8]	; (80a0214 <network_disconnect+0xc>)
 80a020c:	681b      	ldr	r3, [r3, #0]
 80a020e:	68db      	ldr	r3, [r3, #12]
 80a0210:	9301      	str	r3, [sp, #4]
 80a0212:	bd08      	pop	{r3, pc}
 80a0214:	080601c8 	.word	0x080601c8

080a0218 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0218:	b508      	push	{r3, lr}
 80a021a:	4b02      	ldr	r3, [pc, #8]	; (80a0224 <network_ready+0xc>)
 80a021c:	681b      	ldr	r3, [r3, #0]
 80a021e:	691b      	ldr	r3, [r3, #16]
 80a0220:	9301      	str	r3, [sp, #4]
 80a0222:	bd08      	pop	{r3, pc}
 80a0224:	080601c8 	.word	0x080601c8

080a0228 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0228:	b508      	push	{r3, lr}
 80a022a:	4b02      	ldr	r3, [pc, #8]	; (80a0234 <network_on+0xc>)
 80a022c:	681b      	ldr	r3, [r3, #0]
 80a022e:	695b      	ldr	r3, [r3, #20]
 80a0230:	9301      	str	r3, [sp, #4]
 80a0232:	bd08      	pop	{r3, pc}
 80a0234:	080601c8 	.word	0x080601c8

080a0238 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0238:	b508      	push	{r3, lr}
 80a023a:	4b02      	ldr	r3, [pc, #8]	; (80a0244 <network_off+0xc>)
 80a023c:	681b      	ldr	r3, [r3, #0]
 80a023e:	699b      	ldr	r3, [r3, #24]
 80a0240:	9301      	str	r3, [sp, #4]
 80a0242:	bd08      	pop	{r3, pc}
 80a0244:	080601c8 	.word	0x080601c8

080a0248 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0248:	b508      	push	{r3, lr}
 80a024a:	4b02      	ldr	r3, [pc, #8]	; (80a0254 <network_listen+0xc>)
 80a024c:	681b      	ldr	r3, [r3, #0]
 80a024e:	69db      	ldr	r3, [r3, #28]
 80a0250:	9301      	str	r3, [sp, #4]
 80a0252:	bd08      	pop	{r3, pc}
 80a0254:	080601c8 	.word	0x080601c8

080a0258 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0258:	b508      	push	{r3, lr}
 80a025a:	4b02      	ldr	r3, [pc, #8]	; (80a0264 <network_listening+0xc>)
 80a025c:	681b      	ldr	r3, [r3, #0]
 80a025e:	6a1b      	ldr	r3, [r3, #32]
 80a0260:	9301      	str	r3, [sp, #4]
 80a0262:	bd08      	pop	{r3, pc}
 80a0264:	080601c8 	.word	0x080601c8

080a0268 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0268:	b508      	push	{r3, lr}
 80a026a:	4b02      	ldr	r3, [pc, #8]	; (80a0274 <network_set_listen_timeout+0xc>)
 80a026c:	681b      	ldr	r3, [r3, #0]
 80a026e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0270:	9301      	str	r3, [sp, #4]
 80a0272:	bd08      	pop	{r3, pc}
 80a0274:	080601c8 	.word	0x080601c8

080a0278 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0278:	b508      	push	{r3, lr}
 80a027a:	4b02      	ldr	r3, [pc, #8]	; (80a0284 <network_get_listen_timeout+0xc>)
 80a027c:	681b      	ldr	r3, [r3, #0]
 80a027e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0280:	9301      	str	r3, [sp, #4]
 80a0282:	bd08      	pop	{r3, pc}
 80a0284:	080601c8 	.word	0x080601c8

080a0288 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a0288:	b508      	push	{r3, lr}
 80a028a:	4b02      	ldr	r3, [pc, #8]	; (80a0294 <network_is_on+0xc>)
 80a028c:	681b      	ldr	r3, [r3, #0]
 80a028e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0290:	9301      	str	r3, [sp, #4]
 80a0292:	bd08      	pop	{r3, pc}
 80a0294:	080601c8 	.word	0x080601c8

080a0298 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a0298:	b508      	push	{r3, lr}
 80a029a:	4b02      	ldr	r3, [pc, #8]	; (80a02a4 <network_is_off+0xc>)
 80a029c:	681b      	ldr	r3, [r3, #0]
 80a029e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a02a0:	9301      	str	r3, [sp, #4]
 80a02a2:	bd08      	pop	{r3, pc}
 80a02a4:	080601c8 	.word	0x080601c8

080a02a8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a02a8:	b508      	push	{r3, lr}
 80a02aa:	4b02      	ldr	r3, [pc, #8]	; (80a02b4 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a02ac:	681b      	ldr	r3, [r3, #0]
 80a02ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a02b0:	9301      	str	r3, [sp, #4]
 80a02b2:	bd08      	pop	{r3, pc}
 80a02b4:	080601cc 	.word	0x080601cc

080a02b8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a02b8:	b508      	push	{r3, lr}
 80a02ba:	4b02      	ldr	r3, [pc, #8]	; (80a02c4 <malloc+0xc>)
 80a02bc:	681b      	ldr	r3, [r3, #0]
 80a02be:	681b      	ldr	r3, [r3, #0]
 80a02c0:	9301      	str	r3, [sp, #4]
 80a02c2:	bd08      	pop	{r3, pc}
 80a02c4:	080601a0 	.word	0x080601a0

080a02c8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a02c8:	b508      	push	{r3, lr}
 80a02ca:	4b02      	ldr	r3, [pc, #8]	; (80a02d4 <free+0xc>)
 80a02cc:	681b      	ldr	r3, [r3, #0]
 80a02ce:	685b      	ldr	r3, [r3, #4]
 80a02d0:	9301      	str	r3, [sp, #4]
 80a02d2:	bd08      	pop	{r3, pc}
 80a02d4:	080601a0 	.word	0x080601a0

080a02d8 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a02d8:	b508      	push	{r3, lr}
 80a02da:	4b02      	ldr	r3, [pc, #8]	; (80a02e4 <newlib_impure_ptr_callback+0xc>)
 80a02dc:	681b      	ldr	r3, [r3, #0]
 80a02de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a02e0:	9301      	str	r3, [sp, #4]
 80a02e2:	bd08      	pop	{r3, pc}
 80a02e4:	080601a0 	.word	0x080601a0

080a02e8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a02e8:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a02ea:	2000      	movs	r0, #0
 80a02ec:	4b04      	ldr	r3, [pc, #16]	; (80a0300 <_GLOBAL__sub_I_System+0x18>)
 80a02ee:	601a      	str	r2, [r3, #0]
 80a02f0:	4b04      	ldr	r3, [pc, #16]	; (80a0304 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 80a02f2:	4a05      	ldr	r2, [pc, #20]	; (80a0308 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 80a02f4:	6018      	str	r0, [r3, #0]
 80a02f6:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
 80a02f8:	7198      	strb	r0, [r3, #6]
 80a02fa:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a02fc:	f7ff bf58 	b.w	80a01b0 <set_system_mode>
 80a0300:	20000078 	.word	0x20000078
 80a0304:	2000006c 	.word	0x2000006c
 80a0308:	ffff0000 	.word	0xffff0000

080a030c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a030c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a030e:	4606      	mov	r6, r0
 80a0310:	460d      	mov	r5, r1
  size_t n = 0;
 80a0312:	2400      	movs	r4, #0
 80a0314:	188f      	adds	r7, r1, r2
  while (size--) {
 80a0316:	42bd      	cmp	r5, r7
 80a0318:	d00c      	beq.n	80a0334 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a031a:	6833      	ldr	r3, [r6, #0]
 80a031c:	4630      	mov	r0, r6
 80a031e:	689b      	ldr	r3, [r3, #8]
 80a0320:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0324:	4798      	blx	r3
     if (chunk>=0)
 80a0326:	1e03      	subs	r3, r0, #0
 80a0328:	db01      	blt.n	80a032e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a032a:	441c      	add	r4, r3
  while (size--) {
 80a032c:	e7f3      	b.n	80a0316 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a032e:	2c00      	cmp	r4, #0
 80a0330:	bf08      	it	eq
 80a0332:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a0334:	4620      	mov	r0, r4
 80a0336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0338 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a0338:	b570      	push	{r4, r5, r6, lr}
 80a033a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a033c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a033e:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a0340:	b149      	cbz	r1, 80a0356 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a0342:	f000 fbaf 	bl	80a0aa4 <strlen>
 80a0346:	682b      	ldr	r3, [r5, #0]
 80a0348:	4602      	mov	r2, r0
 80a034a:	4621      	mov	r1, r4
 80a034c:	4628      	mov	r0, r5
    }
 80a034e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a0352:	68db      	ldr	r3, [r3, #12]
 80a0354:	4718      	bx	r3
    }
 80a0356:	bd70      	pop	{r4, r5, r6, pc}

080a0358 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a0358:	6803      	ldr	r3, [r0, #0]
 80a035a:	689b      	ldr	r3, [r3, #8]
 80a035c:	4718      	bx	r3

080a035e <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a035e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a0360:	2a01      	cmp	r2, #1
 80a0362:	bf98      	it	ls
 80a0364:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0366:	b530      	push	{r4, r5, lr}
 80a0368:	b08b      	sub	sp, #44	; 0x2c
 80a036a:	460c      	mov	r4, r1
  *str = '\0';
 80a036c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a0370:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a0372:	4625      	mov	r5, r4
 80a0374:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a0378:	fb04 5312 	mls	r3, r4, r2, r5
 80a037c:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a037e:	2b09      	cmp	r3, #9
 80a0380:	bf94      	ite	ls
 80a0382:	3330      	addls	r3, #48	; 0x30
 80a0384:	3337      	addhi	r3, #55	; 0x37
 80a0386:	b2db      	uxtb	r3, r3
  } while(n);
 80a0388:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a038a:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a038e:	d9f0      	bls.n	80a0372 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a0390:	f7ff ffd2 	bl	80a0338 <_ZN5Print5writeEPKc>
}
 80a0394:	b00b      	add	sp, #44	; 0x2c
 80a0396:	bd30      	pop	{r4, r5, pc}

080a0398 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a0398:	2300      	movs	r3, #0
 80a039a:	6840      	ldr	r0, [r0, #4]
 80a039c:	461a      	mov	r2, r3
 80a039e:	4619      	mov	r1, r3
 80a03a0:	f7ff bf42 	b.w	80a0228 <network_on>

080a03a4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a03a4:	4b01      	ldr	r3, [pc, #4]	; (80a03ac <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a03a6:	4a02      	ldr	r2, [pc, #8]	; (80a03b0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a03a8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a03aa:	4770      	bx	lr
 80a03ac:	2000007c 	.word	0x2000007c
 80a03b0:	080a0b98 	.word	0x080a0b98

080a03b4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a03b4:	4b02      	ldr	r3, [pc, #8]	; (80a03c0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a03b6:	681a      	ldr	r2, [r3, #0]
 80a03b8:	4b02      	ldr	r3, [pc, #8]	; (80a03c4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a03ba:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a03bc:	4770      	bx	lr
 80a03be:	bf00      	nop
 80a03c0:	20000000 	.word	0x20000000
 80a03c4:	20000080 	.word	0x20000080

080a03c8 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80a03c8:	2200      	movs	r2, #0
 80a03ca:	4b01      	ldr	r3, [pc, #4]	; (80a03d0 <_GLOBAL__sub_I_RGB+0x8>)
 80a03cc:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 80a03ce:	4770      	bx	lr
 80a03d0:	20000084 	.word	0x20000084

080a03d4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a03d4:	4b01      	ldr	r3, [pc, #4]	; (80a03dc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a03d6:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a03d8:	4770      	bx	lr
 80a03da:	bf00      	nop
 80a03dc:	20000004 	.word	0x20000004

080a03e0 <serialEventRun>:
{
 80a03e0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a03e2:	4b13      	ldr	r3, [pc, #76]	; (80a0430 <serialEventRun+0x50>)
 80a03e4:	b143      	cbz	r3, 80a03f8 <serialEventRun+0x18>
 80a03e6:	f000 f971 	bl	80a06cc <_Z16_fetch_usbserialv>
 80a03ea:	6803      	ldr	r3, [r0, #0]
 80a03ec:	691b      	ldr	r3, [r3, #16]
 80a03ee:	4798      	blx	r3
 80a03f0:	2800      	cmp	r0, #0
 80a03f2:	dd01      	ble.n	80a03f8 <serialEventRun+0x18>
        serialEvent();
 80a03f4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a03f8:	4b0e      	ldr	r3, [pc, #56]	; (80a0434 <serialEventRun+0x54>)
 80a03fa:	b143      	cbz	r3, 80a040e <serialEventRun+0x2e>
 80a03fc:	f000 fa16 	bl	80a082c <_Z22__fetch_global_Serial1v>
 80a0400:	6803      	ldr	r3, [r0, #0]
 80a0402:	691b      	ldr	r3, [r3, #16]
 80a0404:	4798      	blx	r3
 80a0406:	2800      	cmp	r0, #0
 80a0408:	dd01      	ble.n	80a040e <serialEventRun+0x2e>
        serialEvent1();
 80a040a:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a040e:	4b0a      	ldr	r3, [pc, #40]	; (80a0438 <serialEventRun+0x58>)
 80a0410:	b10b      	cbz	r3, 80a0416 <serialEventRun+0x36>
 80a0412:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a0416:	4b09      	ldr	r3, [pc, #36]	; (80a043c <serialEventRun+0x5c>)
 80a0418:	b143      	cbz	r3, 80a042c <serialEventRun+0x4c>
 80a041a:	f000 f991 	bl	80a0740 <_Z17_fetch_usbserial1v>
 80a041e:	6803      	ldr	r3, [r0, #0]
 80a0420:	691b      	ldr	r3, [r3, #16]
 80a0422:	4798      	blx	r3
 80a0424:	2800      	cmp	r0, #0
 80a0426:	dd01      	ble.n	80a042c <serialEventRun+0x4c>
        usbSerialEvent1();
 80a0428:	f3af 8000 	nop.w
}
 80a042c:	bd08      	pop	{r3, pc}
 80a042e:	bf00      	nop
	...

080a0440 <_post_loop>:
{
 80a0440:	b508      	push	{r3, lr}
	serialEventRun();
 80a0442:	f7ff ffcd 	bl	80a03e0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0446:	f7ff fe3b 	bl	80a00c0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a044a:	4b01      	ldr	r3, [pc, #4]	; (80a0450 <_post_loop+0x10>)
 80a044c:	6018      	str	r0, [r3, #0]
}
 80a044e:	bd08      	pop	{r3, pc}
 80a0450:	20000500 	.word	0x20000500

080a0454 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0454:	4805      	ldr	r0, [pc, #20]	; (80a046c <_Z33system_initialize_user_backup_ramv+0x18>)
 80a0456:	4a06      	ldr	r2, [pc, #24]	; (80a0470 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 80a0458:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a045a:	1a12      	subs	r2, r2, r0
 80a045c:	4905      	ldr	r1, [pc, #20]	; (80a0474 <_Z33system_initialize_user_backup_ramv+0x20>)
 80a045e:	f000 fae7 	bl	80a0a30 <memcpy>
    __backup_sram_signature = signature;
 80a0462:	4b05      	ldr	r3, [pc, #20]	; (80a0478 <_Z33system_initialize_user_backup_ramv+0x24>)
 80a0464:	4a05      	ldr	r2, [pc, #20]	; (80a047c <_Z33system_initialize_user_backup_ramv+0x28>)
 80a0466:	601a      	str	r2, [r3, #0]
}
 80a0468:	bd08      	pop	{r3, pc}
 80a046a:	bf00      	nop
 80a046c:	40024000 	.word	0x40024000
 80a0470:	40024004 	.word	0x40024004
 80a0474:	080a0cc0 	.word	0x080a0cc0
 80a0478:	40024000 	.word	0x40024000
 80a047c:	9a271c1e 	.word	0x9a271c1e

080a0480 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0480:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a0482:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0484:	461a      	mov	r2, r3
 80a0486:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a048a:	9300      	str	r3, [sp, #0]
 80a048c:	f7ff fea2 	bl	80a01d4 <system_ctrl_set_result>
}
 80a0490:	b003      	add	sp, #12
 80a0492:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a0498 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a0498:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a049a:	8843      	ldrh	r3, [r0, #2]
 80a049c:	2b0a      	cmp	r3, #10
 80a049e:	d008      	beq.n	80a04b2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a04a0:	2b50      	cmp	r3, #80	; 0x50
 80a04a2:	d10b      	bne.n	80a04bc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a04a4:	4b09      	ldr	r3, [pc, #36]	; (80a04cc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a04a6:	681b      	ldr	r3, [r3, #0]
 80a04a8:	b14b      	cbz	r3, 80a04be <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a04aa:	b003      	add	sp, #12
 80a04ac:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a04b0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a04b2:	f7ff ffe5 	bl	80a0480 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a04b6:	b003      	add	sp, #12
 80a04b8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a04bc:	2300      	movs	r3, #0
 80a04be:	461a      	mov	r2, r3
 80a04c0:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a04c4:	9300      	str	r3, [sp, #0]
 80a04c6:	f7ff fe85 	bl	80a01d4 <system_ctrl_set_result>
}
 80a04ca:	e7f4      	b.n	80a04b6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a04cc:	20000098 	.word	0x20000098

080a04d0 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a04d0:	2100      	movs	r1, #0
{
 80a04d2:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a04d4:	4811      	ldr	r0, [pc, #68]	; (80a051c <module_user_init_hook+0x4c>)
 80a04d6:	f7ff feff 	bl	80a02d8 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 80a04da:	4b11      	ldr	r3, [pc, #68]	; (80a0520 <module_user_init_hook+0x50>)
 80a04dc:	681a      	ldr	r2, [r3, #0]
 80a04de:	4b11      	ldr	r3, [pc, #68]	; (80a0524 <module_user_init_hook+0x54>)
 80a04e0:	429a      	cmp	r2, r3
 80a04e2:	bf0c      	ite	eq
 80a04e4:	2201      	moveq	r2, #1
 80a04e6:	2200      	movne	r2, #0
 80a04e8:	4b0f      	ldr	r3, [pc, #60]	; (80a0528 <module_user_init_hook+0x58>)
 80a04ea:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a04ec:	d001      	beq.n	80a04f2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 80a04ee:	f7ff ffb1 	bl	80a0454 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a04f2:	f7ff fddd 	bl	80a00b0 <HAL_RNG_GetRandomNumber>
 80a04f6:	4604      	mov	r4, r0
    srand(seed);
 80a04f8:	f000 fab0 	bl	80a0a5c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a04fc:	4b0b      	ldr	r3, [pc, #44]	; (80a052c <module_user_init_hook+0x5c>)
 80a04fe:	b113      	cbz	r3, 80a0506 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 80a0500:	4620      	mov	r0, r4
 80a0502:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a0506:	2100      	movs	r1, #0
 80a0508:	4808      	ldr	r0, [pc, #32]	; (80a052c <module_user_init_hook+0x5c>)
 80a050a:	f7ff fecd 	bl	80a02a8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a050e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a0512:	2100      	movs	r1, #0
 80a0514:	4806      	ldr	r0, [pc, #24]	; (80a0530 <module_user_init_hook+0x60>)
 80a0516:	f7ff be53 	b.w	80a01c0 <system_ctrl_set_app_request_handler>
 80a051a:	bf00      	nop
 80a051c:	080a03d5 	.word	0x080a03d5
 80a0520:	40024000 	.word	0x40024000
 80a0524:	9a271c1e 	.word	0x9a271c1e
 80a0528:	20000094 	.word	0x20000094
 80a052c:	00000000 	.word	0x00000000
 80a0530:	080a0499 	.word	0x080a0499

080a0534 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0534:	4770      	bx	lr

080a0536 <_ZN9IPAddressD0Ev>:
 80a0536:	b510      	push	{r4, lr}
 80a0538:	4604      	mov	r4, r0
 80a053a:	2118      	movs	r1, #24
 80a053c:	f000 fa70 	bl	80a0a20 <_ZdlPvj>
 80a0540:	4620      	mov	r0, r4
 80a0542:	bd10      	pop	{r4, pc}

080a0544 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a0544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0546:	460e      	mov	r6, r1
 80a0548:	2400      	movs	r4, #0
 80a054a:	f100 0708 	add.w	r7, r0, #8
 80a054e:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a0550:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a0554:	220a      	movs	r2, #10
 80a0556:	4630      	mov	r0, r6
 80a0558:	f7ff ff01 	bl	80a035e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a055c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a055e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a0560:	d101      	bne.n	80a0566 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a0562:	4620      	mov	r0, r4
 80a0564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a0566:	2c00      	cmp	r4, #0
 80a0568:	d0f2      	beq.n	80a0550 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a056a:	212e      	movs	r1, #46	; 0x2e
 80a056c:	4630      	mov	r0, r6
 80a056e:	f7ff fef3 	bl	80a0358 <_ZN5Print5printEc>
 80a0572:	4404      	add	r4, r0
 80a0574:	e7ec      	b.n	80a0550 <_ZNK9IPAddress7printToER5Print+0xc>
	...

080a0578 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a0578:	b510      	push	{r4, lr}
 80a057a:	4604      	mov	r4, r0
 80a057c:	4b04      	ldr	r3, [pc, #16]	; (80a0590 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a057e:	2211      	movs	r2, #17
 80a0580:	2100      	movs	r1, #0
 80a0582:	f840 3b04 	str.w	r3, [r0], #4
 80a0586:	f000 fa61 	bl	80a0a4c <memset>
}
 80a058a:	4620      	mov	r0, r4
 80a058c:	bd10      	pop	{r4, pc}
 80a058e:	bf00      	nop
 80a0590:	080a0bc0 	.word	0x080a0bc0

080a0594 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a0594:	4603      	mov	r3, r0
 80a0596:	4a07      	ldr	r2, [pc, #28]	; (80a05b4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a0598:	b510      	push	{r4, lr}
 80a059a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a059e:	f101 0210 	add.w	r2, r1, #16
 80a05a2:	f851 4b04 	ldr.w	r4, [r1], #4
 80a05a6:	4291      	cmp	r1, r2
 80a05a8:	f843 4b04 	str.w	r4, [r3], #4
 80a05ac:	d1f9      	bne.n	80a05a2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a05ae:	780a      	ldrb	r2, [r1, #0]
 80a05b0:	701a      	strb	r2, [r3, #0]
}
 80a05b2:	bd10      	pop	{r4, pc}
 80a05b4:	080a0bc0 	.word	0x080a0bc0

080a05b8 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a05b8:	4a02      	ldr	r2, [pc, #8]	; (80a05c4 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a05ba:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a05be:	2204      	movs	r2, #4
 80a05c0:	7502      	strb	r2, [r0, #20]
}
 80a05c2:	4770      	bx	lr
 80a05c4:	080a0bc0 	.word	0x080a0bc0

080a05c8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a05c8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a05ca:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a05ce:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a05d2:	2304      	movs	r3, #4
 80a05d4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a05d8:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a05dc:	6044      	str	r4, [r0, #4]
 80a05de:	7503      	strb	r3, [r0, #20]
}
 80a05e0:	bd10      	pop	{r4, pc}
	...

080a05e4 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a05e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a05e6:	4d04      	ldr	r5, [pc, #16]	; (80a05f8 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a05e8:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a05ea:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a05ee:	9500      	str	r5, [sp, #0]
 80a05f0:	f7ff ffea 	bl	80a05c8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a05f4:	b003      	add	sp, #12
 80a05f6:	bd30      	pop	{r4, r5, pc}
 80a05f8:	080a0bc0 	.word	0x080a0bc0

080a05fc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a05fc:	7441      	strb	r1, [r0, #17]
}
 80a05fe:	4770      	bx	lr

080a0600 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0600:	4770      	bx	lr

080a0602 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a0602:	4770      	bx	lr

080a0604 <_ZN9USBSerial4readEv>:
{
 80a0604:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a0606:	2100      	movs	r1, #0
 80a0608:	7c00      	ldrb	r0, [r0, #16]
 80a060a:	f7ff fdb1 	bl	80a0170 <HAL_USB_USART_Receive_Data>
}
 80a060e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a0612:	bd08      	pop	{r3, pc}

080a0614 <_ZN9USBSerial4peekEv>:
{
 80a0614:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a0616:	2101      	movs	r1, #1
 80a0618:	7c00      	ldrb	r0, [r0, #16]
 80a061a:	f7ff fda9 	bl	80a0170 <HAL_USB_USART_Receive_Data>
}
 80a061e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a0622:	bd08      	pop	{r3, pc}

080a0624 <_ZN9USBSerial17availableForWriteEv>:
{
 80a0624:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a0626:	7c00      	ldrb	r0, [r0, #16]
 80a0628:	f7ff fd9a 	bl	80a0160 <HAL_USB_USART_Available_Data_For_Write>
}
 80a062c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0630:	bd08      	pop	{r3, pc}

080a0632 <_ZN9USBSerial9availableEv>:
{
 80a0632:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a0634:	7c00      	ldrb	r0, [r0, #16]
 80a0636:	f7ff fd8b 	bl	80a0150 <HAL_USB_USART_Available_Data>
}
 80a063a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a063e:	bd08      	pop	{r3, pc}

080a0640 <_ZN9USBSerial5writeEh>:
{
 80a0640:	b538      	push	{r3, r4, r5, lr}
 80a0642:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0644:	7c00      	ldrb	r0, [r0, #16]
{
 80a0646:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0648:	f7ff fd8a 	bl	80a0160 <HAL_USB_USART_Available_Data_For_Write>
 80a064c:	2800      	cmp	r0, #0
 80a064e:	dc01      	bgt.n	80a0654 <_ZN9USBSerial5writeEh+0x14>
 80a0650:	7c60      	ldrb	r0, [r4, #17]
 80a0652:	b128      	cbz	r0, 80a0660 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a0654:	4629      	mov	r1, r5
 80a0656:	7c20      	ldrb	r0, [r4, #16]
 80a0658:	f7ff fd92 	bl	80a0180 <HAL_USB_USART_Send_Data>
 80a065c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a0660:	bd38      	pop	{r3, r4, r5, pc}

080a0662 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a0662:	7c00      	ldrb	r0, [r0, #16]
 80a0664:	f7ff bd94 	b.w	80a0190 <HAL_USB_USART_Flush_Data>

080a0668 <_ZN9USBSerialD0Ev>:
 80a0668:	b510      	push	{r4, lr}
 80a066a:	4604      	mov	r4, r0
 80a066c:	2114      	movs	r1, #20
 80a066e:	f000 f9d7 	bl	80a0a20 <_ZdlPvj>
 80a0672:	4620      	mov	r0, r4
 80a0674:	bd10      	pop	{r4, pc}

080a0676 <__tcf_1>:
 80a0676:	4770      	bx	lr

080a0678 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a0678:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a067a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a067e:	4604      	mov	r4, r0
 80a0680:	4608      	mov	r0, r1
 80a0682:	2100      	movs	r1, #0
 80a0684:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a0688:	4b04      	ldr	r3, [pc, #16]	; (80a069c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a068a:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a068c:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a068e:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a0690:	4611      	mov	r1, r2
  _blocking = true;
 80a0692:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a0694:	f7ff fd54 	bl	80a0140 <HAL_USB_USART_Init>
}
 80a0698:	4620      	mov	r0, r4
 80a069a:	bd10      	pop	{r4, pc}
 80a069c:	080a0bd4 	.word	0x080a0bd4

080a06a0 <_Z19acquireSerialBufferv>:
{
 80a06a0:	b510      	push	{r4, lr}
 80a06a2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a06a4:	2214      	movs	r2, #20
 80a06a6:	2100      	movs	r1, #0
 80a06a8:	f000 f9d0 	bl	80a0a4c <memset>
  conf.rx_buffer = serial_rx_buffer;
 80a06ac:	4b05      	ldr	r3, [pc, #20]	; (80a06c4 <_Z19acquireSerialBufferv+0x24>)
}
 80a06ae:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a06b0:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a06b2:	4b05      	ldr	r3, [pc, #20]	; (80a06c8 <_Z19acquireSerialBufferv+0x28>)
 80a06b4:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a06b6:	f240 1301 	movw	r3, #257	; 0x101
 80a06ba:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a06bc:	2381      	movs	r3, #129	; 0x81
 80a06be:	8223      	strh	r3, [r4, #16]
}
 80a06c0:	bd10      	pop	{r4, pc}
 80a06c2:	bf00      	nop
 80a06c4:	200000cc 	.word	0x200000cc
 80a06c8:	200001cd 	.word	0x200001cd

080a06cc <_Z16_fetch_usbserialv>:
{
 80a06cc:	b530      	push	{r4, r5, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a06ce:	4d0e      	ldr	r5, [pc, #56]	; (80a0708 <_Z16_fetch_usbserialv+0x3c>)
{
 80a06d0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a06d2:	a801      	add	r0, sp, #4
 80a06d4:	f7ff ffe4 	bl	80a06a0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a06d8:	7829      	ldrb	r1, [r5, #0]
 80a06da:	f3bf 8f5b 	dmb	ish
 80a06de:	f011 0401 	ands.w	r4, r1, #1
 80a06e2:	d10e      	bne.n	80a0702 <_Z16_fetch_usbserialv+0x36>
 80a06e4:	4628      	mov	r0, r5
 80a06e6:	f7ff fcd8 	bl	80a009a <__cxa_guard_acquire>
 80a06ea:	b150      	cbz	r0, 80a0702 <_Z16_fetch_usbserialv+0x36>
 80a06ec:	4621      	mov	r1, r4
 80a06ee:	aa01      	add	r2, sp, #4
 80a06f0:	4806      	ldr	r0, [pc, #24]	; (80a070c <_Z16_fetch_usbserialv+0x40>)
 80a06f2:	f7ff ffc1 	bl	80a0678 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a06f6:	4628      	mov	r0, r5
 80a06f8:	f7ff fcd4 	bl	80a00a4 <__cxa_guard_release>
 80a06fc:	4804      	ldr	r0, [pc, #16]	; (80a0710 <_Z16_fetch_usbserialv+0x44>)
 80a06fe:	f000 f991 	bl	80a0a24 <atexit>
	return _usbserial;
}
 80a0702:	4802      	ldr	r0, [pc, #8]	; (80a070c <_Z16_fetch_usbserialv+0x40>)
 80a0704:	b007      	add	sp, #28
 80a0706:	bd30      	pop	{r4, r5, pc}
 80a0708:	2000009c 	.word	0x2000009c
 80a070c:	200000a4 	.word	0x200000a4
 80a0710:	080a0601 	.word	0x080a0601

080a0714 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a0714:	b510      	push	{r4, lr}
 80a0716:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0718:	2214      	movs	r2, #20
 80a071a:	2100      	movs	r1, #0
 80a071c:	f000 f996 	bl	80a0a4c <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a0720:	4b05      	ldr	r3, [pc, #20]	; (80a0738 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0722:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a0724:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a0726:	4b05      	ldr	r3, [pc, #20]	; (80a073c <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a0728:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a072a:	f240 1301 	movw	r3, #257	; 0x101
 80a072e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0730:	2381      	movs	r3, #129	; 0x81
 80a0732:	8223      	strh	r3, [r4, #16]
}
 80a0734:	bd10      	pop	{r4, pc}
 80a0736:	bf00      	nop
 80a0738:	2000024e 	.word	0x2000024e
 80a073c:	2000034f 	.word	0x2000034f

080a0740 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a0740:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0742:	4c0e      	ldr	r4, [pc, #56]	; (80a077c <_Z17_fetch_usbserial1v+0x3c>)
{
 80a0744:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a0746:	a801      	add	r0, sp, #4
 80a0748:	f7ff ffe4 	bl	80a0714 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a074c:	7823      	ldrb	r3, [r4, #0]
 80a074e:	f3bf 8f5b 	dmb	ish
 80a0752:	07db      	lsls	r3, r3, #31
 80a0754:	d40e      	bmi.n	80a0774 <_Z17_fetch_usbserial1v+0x34>
 80a0756:	4620      	mov	r0, r4
 80a0758:	f7ff fc9f 	bl	80a009a <__cxa_guard_acquire>
 80a075c:	b150      	cbz	r0, 80a0774 <_Z17_fetch_usbserial1v+0x34>
 80a075e:	2101      	movs	r1, #1
 80a0760:	aa01      	add	r2, sp, #4
 80a0762:	4807      	ldr	r0, [pc, #28]	; (80a0780 <_Z17_fetch_usbserial1v+0x40>)
 80a0764:	f7ff ff88 	bl	80a0678 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0768:	4620      	mov	r0, r4
 80a076a:	f7ff fc9b 	bl	80a00a4 <__cxa_guard_release>
 80a076e:	4805      	ldr	r0, [pc, #20]	; (80a0784 <_Z17_fetch_usbserial1v+0x44>)
 80a0770:	f000 f958 	bl	80a0a24 <atexit>
  return _usbserial1;
}
 80a0774:	4802      	ldr	r0, [pc, #8]	; (80a0780 <_Z17_fetch_usbserial1v+0x40>)
 80a0776:	b006      	add	sp, #24
 80a0778:	bd10      	pop	{r4, pc}
 80a077a:	bf00      	nop
 80a077c:	200000a0 	.word	0x200000a0
 80a0780:	200000b8 	.word	0x200000b8
 80a0784:	080a0677 	.word	0x080a0677

080a0788 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a0788:	4770      	bx	lr

080a078a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a078a:	7441      	strb	r1, [r0, #17]
}
 80a078c:	4770      	bx	lr

080a078e <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a078e:	4770      	bx	lr

080a0790 <_ZN11USARTSerial17availableForWriteEv>:
{
 80a0790:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a0792:	7c00      	ldrb	r0, [r0, #16]
 80a0794:	f7ff fccc 	bl	80a0130 <hal_usart_available_data_for_write>
}
 80a0798:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a079c:	bd08      	pop	{r3, pc}

080a079e <_ZN11USARTSerial9availableEv>:
{
 80a079e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a07a0:	7c00      	ldrb	r0, [r0, #16]
 80a07a2:	f7ff fca5 	bl	80a00f0 <hal_usart_available>
}
 80a07a6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a07aa:	bd08      	pop	{r3, pc}

080a07ac <_ZN11USARTSerial4peekEv>:
{
 80a07ac:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a07ae:	7c00      	ldrb	r0, [r0, #16]
 80a07b0:	f7ff fcae 	bl	80a0110 <hal_usart_peek>
}
 80a07b4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a07b8:	bd08      	pop	{r3, pc}

080a07ba <_ZN11USARTSerial4readEv>:
{
 80a07ba:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a07bc:	7c00      	ldrb	r0, [r0, #16]
 80a07be:	f7ff fc9f 	bl	80a0100 <hal_usart_read>
}
 80a07c2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a07c6:	bd08      	pop	{r3, pc}

080a07c8 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
 80a07c8:	7c00      	ldrb	r0, [r0, #16]
 80a07ca:	f7ff bca9 	b.w	80a0120 <hal_usart_flush>

080a07ce <_ZN11USARTSerial5writeEh>:
{
 80a07ce:	b570      	push	{r4, r5, r6, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a07d0:	7c46      	ldrb	r6, [r0, #17]
{
 80a07d2:	4604      	mov	r4, r0
 80a07d4:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a07d6:	b12e      	cbz	r6, 80a07e4 <_ZN11USARTSerial5writeEh+0x16>
	  return hal_usart_write(_serial, c);
 80a07d8:	4629      	mov	r1, r5
 80a07da:	7c20      	ldrb	r0, [r4, #16]
}
 80a07dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a07e0:	f7ff bc7e 	b.w	80a00e0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a07e4:	7c00      	ldrb	r0, [r0, #16]
 80a07e6:	f7ff fca3 	bl	80a0130 <hal_usart_available_data_for_write>
 80a07ea:	2800      	cmp	r0, #0
 80a07ec:	dcf4      	bgt.n	80a07d8 <_ZN11USARTSerial5writeEh+0xa>
}
 80a07ee:	4630      	mov	r0, r6
 80a07f0:	bd70      	pop	{r4, r5, r6, pc}

080a07f2 <_ZN11USARTSerialD0Ev>:
 80a07f2:	b510      	push	{r4, lr}
 80a07f4:	4604      	mov	r4, r0
 80a07f6:	2114      	movs	r1, #20
 80a07f8:	f000 f912 	bl	80a0a20 <_ZdlPvj>
 80a07fc:	4620      	mov	r0, r4
 80a07fe:	bd10      	pop	{r4, pc}

080a0800 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a0800:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a0804:	b510      	push	{r4, lr}
 80a0806:	4604      	mov	r4, r0
 80a0808:	4608      	mov	r0, r1
 80a080a:	4611      	mov	r1, r2
 80a080c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a0810:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a0814:	4a04      	ldr	r2, [pc, #16]	; (80a0828 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a0816:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a0818:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a081a:	2201      	movs	r2, #1
 80a081c:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a081e:	461a      	mov	r2, r3
 80a0820:	f7ff fc56 	bl	80a00d0 <hal_usart_init>
}
 80a0824:	4620      	mov	r0, r4
 80a0826:	bd10      	pop	{r4, pc}
 80a0828:	080a0c04 	.word	0x080a0c04

080a082c <_Z22__fetch_global_Serial1v>:
{
 80a082c:	b538      	push	{r3, r4, r5, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a082e:	4d0c      	ldr	r5, [pc, #48]	; (80a0860 <_Z22__fetch_global_Serial1v+0x34>)
 80a0830:	7829      	ldrb	r1, [r5, #0]
 80a0832:	f3bf 8f5b 	dmb	ish
 80a0836:	f011 0401 	ands.w	r4, r1, #1
 80a083a:	d10f      	bne.n	80a085c <_Z22__fetch_global_Serial1v+0x30>
 80a083c:	4628      	mov	r0, r5
 80a083e:	f7ff fc2c 	bl	80a009a <__cxa_guard_acquire>
 80a0842:	b158      	cbz	r0, 80a085c <_Z22__fetch_global_Serial1v+0x30>
 80a0844:	4621      	mov	r1, r4
 80a0846:	4b07      	ldr	r3, [pc, #28]	; (80a0864 <_Z22__fetch_global_Serial1v+0x38>)
 80a0848:	4a07      	ldr	r2, [pc, #28]	; (80a0868 <_Z22__fetch_global_Serial1v+0x3c>)
 80a084a:	4808      	ldr	r0, [pc, #32]	; (80a086c <_Z22__fetch_global_Serial1v+0x40>)
 80a084c:	f7ff ffd8 	bl	80a0800 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a0850:	4628      	mov	r0, r5
 80a0852:	f7ff fc27 	bl	80a00a4 <__cxa_guard_release>
 80a0856:	4806      	ldr	r0, [pc, #24]	; (80a0870 <_Z22__fetch_global_Serial1v+0x44>)
 80a0858:	f000 f8e4 	bl	80a0a24 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a085c:	4803      	ldr	r0, [pc, #12]	; (80a086c <_Z22__fetch_global_Serial1v+0x40>)
 80a085e:	bd38      	pop	{r3, r4, r5, pc}
 80a0860:	200003d0 	.word	0x200003d0
 80a0864:	20000458 	.word	0x20000458
 80a0868:	200003d4 	.word	0x200003d4
 80a086c:	200004dc 	.word	0x200004dc
 80a0870:	080a078f 	.word	0x080a078f

080a0874 <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a0874:	2200      	movs	r2, #0
 80a0876:	6840      	ldr	r0, [r0, #4]
 80a0878:	4611      	mov	r1, r2
 80a087a:	f7ff bccd 	b.w	80a0218 <network_ready>

080a087e <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a087e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0880:	4615      	mov	r5, r2
 80a0882:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a0884:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a0886:	460e      	mov	r6, r1
 80a0888:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a088a:	2100      	movs	r1, #0
 80a088c:	a803      	add	r0, sp, #12
 80a088e:	f000 f8dd 	bl	80a0a4c <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0892:	4628      	mov	r0, r5
 80a0894:	f000 f906 	bl	80a0aa4 <strlen>
 80a0898:	2700      	movs	r7, #0
 80a089a:	b281      	uxth	r1, r0
 80a089c:	6873      	ldr	r3, [r6, #4]
 80a089e:	4628      	mov	r0, r5
 80a08a0:	9700      	str	r7, [sp, #0]
 80a08a2:	aa03      	add	r2, sp, #12
 80a08a4:	f7ff fc7c 	bl	80a01a0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a08a8:	b130      	cbz	r0, 80a08b8 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a08aa:	4639      	mov	r1, r7
 80a08ac:	4620      	mov	r0, r4
 80a08ae:	f7ff fe83 	bl	80a05b8 <_ZN9IPAddressC1Em>
    }
 80a08b2:	4620      	mov	r0, r4
 80a08b4:	b009      	add	sp, #36	; 0x24
 80a08b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a08b8:	4620      	mov	r0, r4
 80a08ba:	a903      	add	r1, sp, #12
 80a08bc:	f7ff fe6a 	bl	80a0594 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a08c0:	e7f7      	b.n	80a08b2 <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a08c2 <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a08c2:	2200      	movs	r2, #0
 80a08c4:	6840      	ldr	r0, [r0, #4]
 80a08c6:	4611      	mov	r1, r2
 80a08c8:	f7ff bcc6 	b.w	80a0258 <network_listening>

080a08cc <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a08cc:	2200      	movs	r2, #0
 80a08ce:	6840      	ldr	r0, [r0, #4]
 80a08d0:	4611      	mov	r1, r2
 80a08d2:	f7ff bcd1 	b.w	80a0278 <network_get_listen_timeout>

080a08d6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a08d6:	2200      	movs	r2, #0
 80a08d8:	6840      	ldr	r0, [r0, #4]
 80a08da:	f7ff bcc5 	b.w	80a0268 <network_set_listen_timeout>

080a08de <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a08de:	2200      	movs	r2, #0
 80a08e0:	6840      	ldr	r0, [r0, #4]
 80a08e2:	f081 0101 	eor.w	r1, r1, #1
 80a08e6:	f7ff bcaf 	b.w	80a0248 <network_listen>

080a08ea <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a08ea:	2300      	movs	r3, #0
 80a08ec:	6840      	ldr	r0, [r0, #4]
 80a08ee:	461a      	mov	r2, r3
 80a08f0:	4619      	mov	r1, r3
 80a08f2:	f7ff bca1 	b.w	80a0238 <network_off>

080a08f6 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a08f6:	2200      	movs	r2, #0
 80a08f8:	6840      	ldr	r0, [r0, #4]
 80a08fa:	4611      	mov	r1, r2
 80a08fc:	f7ff bc7c 	b.w	80a01f8 <network_connecting>

080a0900 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a0900:	2200      	movs	r2, #0
 80a0902:	2102      	movs	r1, #2
 80a0904:	6840      	ldr	r0, [r0, #4]
 80a0906:	f7ff bc7f 	b.w	80a0208 <network_disconnect>

080a090a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a090a:	2300      	movs	r3, #0
 80a090c:	6840      	ldr	r0, [r0, #4]
 80a090e:	461a      	mov	r2, r3
 80a0910:	f7ff bc6a 	b.w	80a01e8 <network_connect>

080a0914 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a0914:	2204      	movs	r2, #4
 80a0916:	4b02      	ldr	r3, [pc, #8]	; (80a0920 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a0918:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a091a:	4a02      	ldr	r2, [pc, #8]	; (80a0924 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a091c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a091e:	4770      	bx	lr
 80a0920:	200004f0 	.word	0x200004f0
 80a0924:	080a0c34 	.word	0x080a0c34

080a0928 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a0928:	2300      	movs	r3, #0
 80a092a:	6840      	ldr	r0, [r0, #4]
 80a092c:	461a      	mov	r2, r3
 80a092e:	f7ff bc5b 	b.w	80a01e8 <network_connect>

080a0932 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a0932:	2200      	movs	r2, #0
 80a0934:	2102      	movs	r1, #2
 80a0936:	6840      	ldr	r0, [r0, #4]
 80a0938:	f7ff bc66 	b.w	80a0208 <network_disconnect>

080a093c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a093c:	2200      	movs	r2, #0
 80a093e:	6840      	ldr	r0, [r0, #4]
 80a0940:	4611      	mov	r1, r2
 80a0942:	f7ff bc59 	b.w	80a01f8 <network_connecting>

080a0946 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a0946:	2200      	movs	r2, #0
 80a0948:	6840      	ldr	r0, [r0, #4]
 80a094a:	4611      	mov	r1, r2
 80a094c:	f7ff bc64 	b.w	80a0218 <network_ready>

080a0950 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a0950:	2300      	movs	r3, #0
 80a0952:	6840      	ldr	r0, [r0, #4]
 80a0954:	461a      	mov	r2, r3
 80a0956:	4619      	mov	r1, r3
 80a0958:	f7ff bc66 	b.w	80a0228 <network_on>

080a095c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a095c:	2300      	movs	r3, #0
 80a095e:	6840      	ldr	r0, [r0, #4]
 80a0960:	461a      	mov	r2, r3
 80a0962:	4619      	mov	r1, r3
 80a0964:	f7ff bc68 	b.w	80a0238 <network_off>

080a0968 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a0968:	2100      	movs	r1, #0
 80a096a:	6840      	ldr	r0, [r0, #4]
 80a096c:	f7ff bc8c 	b.w	80a0288 <network_is_on>

080a0970 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a0970:	2100      	movs	r1, #0
 80a0972:	6840      	ldr	r0, [r0, #4]
 80a0974:	f7ff bc90 	b.w	80a0298 <network_is_off>

080a0978 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a0978:	2200      	movs	r2, #0
 80a097a:	6840      	ldr	r0, [r0, #4]
 80a097c:	f081 0101 	eor.w	r1, r1, #1
 80a0980:	f7ff bc62 	b.w	80a0248 <network_listen>

080a0984 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a0984:	2200      	movs	r2, #0
 80a0986:	6840      	ldr	r0, [r0, #4]
 80a0988:	f7ff bc6e 	b.w	80a0268 <network_set_listen_timeout>

080a098c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a098c:	2200      	movs	r2, #0
 80a098e:	6840      	ldr	r0, [r0, #4]
 80a0990:	4611      	mov	r1, r2
 80a0992:	f7ff bc71 	b.w	80a0278 <network_get_listen_timeout>

080a0996 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a0996:	2200      	movs	r2, #0
 80a0998:	6840      	ldr	r0, [r0, #4]
 80a099a:	4611      	mov	r1, r2
 80a099c:	f7ff bc5c 	b.w	80a0258 <network_listening>

080a09a0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a09a0:	b570      	push	{r4, r5, r6, lr}
 80a09a2:	4615      	mov	r5, r2
 80a09a4:	b08e      	sub	sp, #56	; 0x38
 80a09a6:	4604      	mov	r4, r0
    IPAddress addr;
 80a09a8:	a808      	add	r0, sp, #32
 80a09aa:	f7ff fde5 	bl	80a0578 <_ZN9IPAddressC1Ev>
        HAL_IPAddress ip = {};
 80a09ae:	2211      	movs	r2, #17
 80a09b0:	2100      	movs	r1, #0
 80a09b2:	a803      	add	r0, sp, #12
 80a09b4:	f000 f84a 	bl	80a0a4c <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a09b8:	2600      	movs	r6, #0
 80a09ba:	4628      	mov	r0, r5
 80a09bc:	f000 f872 	bl	80a0aa4 <strlen>
 80a09c0:	4b0a      	ldr	r3, [pc, #40]	; (80a09ec <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a09c2:	9600      	str	r6, [sp, #0]
 80a09c4:	b281      	uxth	r1, r0
 80a09c6:	685b      	ldr	r3, [r3, #4]
 80a09c8:	4628      	mov	r0, r5
 80a09ca:	aa03      	add	r2, sp, #12
 80a09cc:	f7ff fbe8 	bl	80a01a0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a09d0:	b130      	cbz	r0, 80a09e0 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a09d2:	4631      	mov	r1, r6
 80a09d4:	4620      	mov	r0, r4
 80a09d6:	f7ff fdef 	bl	80a05b8 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a09da:	4620      	mov	r0, r4
 80a09dc:	b00e      	add	sp, #56	; 0x38
 80a09de:	bd70      	pop	{r4, r5, r6, pc}
 80a09e0:	4620      	mov	r0, r4
 80a09e2:	a903      	add	r1, sp, #12
 80a09e4:	f7ff fdd6 	bl	80a0594 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a09e8:	e7f7      	b.n	80a09da <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a09ea:	bf00      	nop
 80a09ec:	200004f0 	.word	0x200004f0

080a09f0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a09f0:	4b02      	ldr	r3, [pc, #8]	; (80a09fc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a09f2:	4a03      	ldr	r2, [pc, #12]	; (80a0a00 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a09f4:	601a      	str	r2, [r3, #0]
 80a09f6:	2200      	movs	r2, #0
 80a09f8:	605a      	str	r2, [r3, #4]

} // spark
 80a09fa:	4770      	bx	lr
 80a09fc:	200004f8 	.word	0x200004f8
 80a0a00:	080a0c70 	.word	0x080a0c70

080a0a04 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a0a04:	2300      	movs	r3, #0
 80a0a06:	b507      	push	{r0, r1, r2, lr}
 80a0a08:	461a      	mov	r2, r3
 80a0a0a:	4619      	mov	r1, r3
 80a0a0c:	9300      	str	r3, [sp, #0]
 80a0a0e:	4803      	ldr	r0, [pc, #12]	; (80a0a1c <_GLOBAL__sub_I_INADDR_NONE+0x18>)
 80a0a10:	f7ff fde8 	bl	80a05e4 <_ZN9IPAddressC1Ehhhh>
 80a0a14:	b003      	add	sp, #12
 80a0a16:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0a1a:	bf00      	nop
 80a0a1c:	20000504 	.word	0x20000504

080a0a20 <_ZdlPvj>:
 80a0a20:	f7ff bb39 	b.w	80a0096 <_ZdlPv>

080a0a24 <atexit>:
 80a0a24:	2300      	movs	r3, #0
 80a0a26:	4601      	mov	r1, r0
 80a0a28:	461a      	mov	r2, r3
 80a0a2a:	4618      	mov	r0, r3
 80a0a2c:	f000 b842 	b.w	80a0ab4 <__register_exitproc>

080a0a30 <memcpy>:
 80a0a30:	440a      	add	r2, r1
 80a0a32:	4291      	cmp	r1, r2
 80a0a34:	f100 33ff 	add.w	r3, r0, #4294967295
 80a0a38:	d100      	bne.n	80a0a3c <memcpy+0xc>
 80a0a3a:	4770      	bx	lr
 80a0a3c:	b510      	push	{r4, lr}
 80a0a3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a0a42:	4291      	cmp	r1, r2
 80a0a44:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a0a48:	d1f9      	bne.n	80a0a3e <memcpy+0xe>
 80a0a4a:	bd10      	pop	{r4, pc}

080a0a4c <memset>:
 80a0a4c:	4603      	mov	r3, r0
 80a0a4e:	4402      	add	r2, r0
 80a0a50:	4293      	cmp	r3, r2
 80a0a52:	d100      	bne.n	80a0a56 <memset+0xa>
 80a0a54:	4770      	bx	lr
 80a0a56:	f803 1b01 	strb.w	r1, [r3], #1
 80a0a5a:	e7f9      	b.n	80a0a50 <memset+0x4>

080a0a5c <srand>:
 80a0a5c:	b538      	push	{r3, r4, r5, lr}
 80a0a5e:	4b0d      	ldr	r3, [pc, #52]	; (80a0a94 <srand+0x38>)
 80a0a60:	4604      	mov	r4, r0
 80a0a62:	681d      	ldr	r5, [r3, #0]
 80a0a64:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a0a66:	b97b      	cbnz	r3, 80a0a88 <srand+0x2c>
 80a0a68:	2018      	movs	r0, #24
 80a0a6a:	f7ff fc25 	bl	80a02b8 <malloc>
 80a0a6e:	4a0a      	ldr	r2, [pc, #40]	; (80a0a98 <srand+0x3c>)
 80a0a70:	4b0a      	ldr	r3, [pc, #40]	; (80a0a9c <srand+0x40>)
 80a0a72:	63a8      	str	r0, [r5, #56]	; 0x38
 80a0a74:	e9c0 2300 	strd	r2, r3, [r0]
 80a0a78:	4b09      	ldr	r3, [pc, #36]	; (80a0aa0 <srand+0x44>)
 80a0a7a:	2201      	movs	r2, #1
 80a0a7c:	6083      	str	r3, [r0, #8]
 80a0a7e:	230b      	movs	r3, #11
 80a0a80:	8183      	strh	r3, [r0, #12]
 80a0a82:	2300      	movs	r3, #0
 80a0a84:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a0a88:	2200      	movs	r2, #0
 80a0a8a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a0a8c:	611c      	str	r4, [r3, #16]
 80a0a8e:	615a      	str	r2, [r3, #20]
 80a0a90:	bd38      	pop	{r3, r4, r5, pc}
 80a0a92:	bf00      	nop
 80a0a94:	20000004 	.word	0x20000004
 80a0a98:	abcd330e 	.word	0xabcd330e
 80a0a9c:	e66d1234 	.word	0xe66d1234
 80a0aa0:	0005deec 	.word	0x0005deec

080a0aa4 <strlen>:
 80a0aa4:	4603      	mov	r3, r0
 80a0aa6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a0aaa:	2a00      	cmp	r2, #0
 80a0aac:	d1fb      	bne.n	80a0aa6 <strlen+0x2>
 80a0aae:	1a18      	subs	r0, r3, r0
 80a0ab0:	3801      	subs	r0, #1
 80a0ab2:	4770      	bx	lr

080a0ab4 <__register_exitproc>:
 80a0ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a0ab8:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80a0b78 <__register_exitproc+0xc4>
 80a0abc:	4606      	mov	r6, r0
 80a0abe:	f8d8 0000 	ldr.w	r0, [r8]
 80a0ac2:	461f      	mov	r7, r3
 80a0ac4:	460d      	mov	r5, r1
 80a0ac6:	4691      	mov	r9, r2
 80a0ac8:	f000 f858 	bl	80a0b7c <__retarget_lock_acquire_recursive>
 80a0acc:	4b26      	ldr	r3, [pc, #152]	; (80a0b68 <__register_exitproc+0xb4>)
 80a0ace:	681c      	ldr	r4, [r3, #0]
 80a0ad0:	b934      	cbnz	r4, 80a0ae0 <__register_exitproc+0x2c>
 80a0ad2:	4c26      	ldr	r4, [pc, #152]	; (80a0b6c <__register_exitproc+0xb8>)
 80a0ad4:	601c      	str	r4, [r3, #0]
 80a0ad6:	4b26      	ldr	r3, [pc, #152]	; (80a0b70 <__register_exitproc+0xbc>)
 80a0ad8:	b113      	cbz	r3, 80a0ae0 <__register_exitproc+0x2c>
 80a0ada:	681b      	ldr	r3, [r3, #0]
 80a0adc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80a0ae0:	6863      	ldr	r3, [r4, #4]
 80a0ae2:	2b1f      	cmp	r3, #31
 80a0ae4:	dd07      	ble.n	80a0af6 <__register_exitproc+0x42>
 80a0ae6:	f8d8 0000 	ldr.w	r0, [r8]
 80a0aea:	f000 f849 	bl	80a0b80 <__retarget_lock_release_recursive>
 80a0aee:	f04f 30ff 	mov.w	r0, #4294967295
 80a0af2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a0af6:	b35e      	cbz	r6, 80a0b50 <__register_exitproc+0x9c>
 80a0af8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80a0afc:	b988      	cbnz	r0, 80a0b22 <__register_exitproc+0x6e>
 80a0afe:	4b1d      	ldr	r3, [pc, #116]	; (80a0b74 <__register_exitproc+0xc0>)
 80a0b00:	b923      	cbnz	r3, 80a0b0c <__register_exitproc+0x58>
 80a0b02:	f8d8 0000 	ldr.w	r0, [r8]
 80a0b06:	f000 f83a 	bl	80a0b7e <__retarget_lock_release>
 80a0b0a:	e7f0      	b.n	80a0aee <__register_exitproc+0x3a>
 80a0b0c:	f44f 7084 	mov.w	r0, #264	; 0x108
 80a0b10:	f7ff fbd2 	bl	80a02b8 <malloc>
 80a0b14:	2800      	cmp	r0, #0
 80a0b16:	d0f4      	beq.n	80a0b02 <__register_exitproc+0x4e>
 80a0b18:	2300      	movs	r3, #0
 80a0b1a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80a0b1e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80a0b22:	2201      	movs	r2, #1
 80a0b24:	6863      	ldr	r3, [r4, #4]
 80a0b26:	2e02      	cmp	r6, #2
 80a0b28:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80a0b2c:	fa02 f203 	lsl.w	r2, r2, r3
 80a0b30:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80a0b34:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80a0b38:	ea43 0302 	orr.w	r3, r3, r2
 80a0b3c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80a0b40:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80a0b44:	bf02      	ittt	eq
 80a0b46:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80a0b4a:	431a      	orreq	r2, r3
 80a0b4c:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 80a0b50:	6863      	ldr	r3, [r4, #4]
 80a0b52:	f8d8 0000 	ldr.w	r0, [r8]
 80a0b56:	1c5a      	adds	r2, r3, #1
 80a0b58:	3302      	adds	r3, #2
 80a0b5a:	6062      	str	r2, [r4, #4]
 80a0b5c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80a0b60:	f000 f80e 	bl	80a0b80 <__retarget_lock_release_recursive>
 80a0b64:	2000      	movs	r0, #0
 80a0b66:	e7c4      	b.n	80a0af2 <__register_exitproc+0x3e>
 80a0b68:	200005a8 	.word	0x200005a8
 80a0b6c:	2000051c 	.word	0x2000051c
 80a0b70:	00000000 	.word	0x00000000
 80a0b74:	080a02b9 	.word	0x080a02b9
 80a0b78:	20000068 	.word	0x20000068

080a0b7c <__retarget_lock_acquire_recursive>:
 80a0b7c:	4770      	bx	lr

080a0b7e <__retarget_lock_release>:
 80a0b7e:	4770      	bx	lr

080a0b80 <__retarget_lock_release_recursive>:
 80a0b80:	4770      	bx	lr

080a0b82 <link_code_end>:
	...

080a0b84 <dynalib_user>:
 80a0b84:	001d 080a 005d 080a 0085 080a 0089 080a     ....]...........
 80a0b94:	0000 0000 7061 0070 5925 252d 2d6d 6425     ....app.%Y-%m-%d
 80a0ba4:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
 80a0bb4:	6d69 0065                                   ime.

080a0bb8 <_ZTV9IPAddress>:
	...
 80a0bc0:	0545 080a 0535 080a 0537 080a               E...5...7...

080a0bcc <_ZTV9USBSerial>:
	...
 80a0bd4:	0603 080a 0669 080a 0641 080a 030d 080a     ....i...A.......
 80a0be4:	0633 080a 0605 080a 0615 080a 0663 080a     3...........c...
 80a0bf4:	0625 080a 05fd 080a                         %.......

080a0bfc <_ZTV11USARTSerial>:
	...
 80a0c04:	0789 080a 07f3 080a 07cf 080a 030d 080a     ................
 80a0c14:	079f 080a 07bb 080a 07ad 080a 07c9 080a     ................
 80a0c24:	078b 080a 0791 080a                         ........

080a0c2c <_ZTVN5spark9WiFiClassE>:
	...
 80a0c34:	090b 080a 0901 080a 08f7 080a 0875 080a     ............u...
 80a0c44:	0399 080a 08eb 080a 0969 080a 0971 080a     ........i...q...
 80a0c54:	08df 080a 08d7 080a 08cd 080a 08c3 080a     ................
 80a0c64:	087f 080a                                   ....

080a0c68 <_ZTVN5spark12NetworkClassE>:
	...
 80a0c70:	0929 080a 0933 080a 093d 080a 0947 080a     )...3...=...G...
 80a0c80:	0951 080a 095d 080a 0969 080a 0971 080a     Q...]...i...q...
 80a0c90:	0979 080a 0985 080a 098d 080a 0997 080a     y...............
 80a0ca0:	09a1 080a                                   ....

080a0ca4 <link_const_variable_data_end>:
 80a0ca4:	080a02e9 	.word	0x080a02e9
 80a0ca8:	080a03a5 	.word	0x080a03a5
 80a0cac:	080a03b5 	.word	0x080a03b5
 80a0cb0:	080a03c9 	.word	0x080a03c9
 80a0cb4:	080a0915 	.word	0x080a0915
 80a0cb8:	080a09f1 	.word	0x080a09f1
 80a0cbc:	080a0a05 	.word	0x080a0a05
